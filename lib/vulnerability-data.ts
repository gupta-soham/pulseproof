import { VulnerabilityAlert, FilterState, PaginationState } from '@/types';

export const DUMMY_VULNERABILITIES: VulnerabilityAlert[] = [
    {
        id: 'vuln_001',
        serialNumber: 1,
        pocSummary: 'Reentrancy vulnerability in withdraw function',
        pocCodeLink: 'https://github.com/example/poc-001',
        priorityScore: 1,
        contractHash: '0x1234567890abcdef1234567890abcdef12345678',
        detectedAt: new Date('2025-01-15T10:30:00Z'),
        status: 'new',
        category: 'pattern_match'
    },
    {
        id: 'vuln_002',
        serialNumber: 2,
        pocSummary: 'Suspicious large transaction detected',
        pocCodeLink: 'https://github.com/example/poc-002',
        priorityScore: 2,
        contractHash: '0xabcdef1234567890abcdef1234567890abcdef12',
        detectedAt: new Date('2025-01-15T11:45:00Z'),
        status: 'acknowledged',
        category: 'suspicious_transaction'
    },
    {
        id: 'vuln_003',
        serialNumber: 3,
        pocSummary: 'Gas limit exceeded in multiple transactions',
        pocCodeLink: 'https://github.com/example/poc-003',
        priorityScore: 3,
        contractHash: '0x567890abcdef1234567890abcdef1234567890ab',
        detectedAt: new Date('2025-01-15T12:15:00Z'),
        status: 'new',
        category: 'high_gas'
    },
    {
        id: 'vuln_004',
        serialNumber: 4,
        pocSummary: 'Transaction amount exceeds liquidity pool',
        pocCodeLink: 'https://github.com/example/poc-004',
        priorityScore: 1,
        contractHash: '0x890abcdef1234567890abcdef1234567890abcdef',
        detectedAt: new Date('2025-01-15T13:20:00Z'),
        status: 'new',
        category: 'liquidity_exceeded'
    },
    {
        id: 'vuln_005',
        serialNumber: 5,
        pocSummary: 'Integer overflow in calculation function',
        pocCodeLink: 'https://github.com/example/poc-005',
        priorityScore: 2,
        contractHash: '0xdef1234567890abcdef1234567890abcdef123456',
        detectedAt: new Date('2025-01-15T14:10:00Z'),
        status: 'resolved',
        category: 'pattern_match'
    },
    {
        id: 'vuln_006',
        serialNumber: 6,
        pocSummary: 'Unauthorized access attempt detected',
        pocCodeLink: 'https://github.com/example/poc-006',
        priorityScore: 1,
        contractHash: '0x234567890abcdef1234567890abcdef1234567890',
        detectedAt: new Date('2025-01-15T15:30:00Z'),
        status: 'new',
        category: 'suspicious_transaction'
    },
    {
        id: 'vuln_007',
        serialNumber: 7,
        pocSummary: 'Front-running attack pattern identified',
        pocCodeLink: 'https://github.com/example/poc-007',
        priorityScore: 2,
        contractHash: '0x67890abcdef1234567890abcdef1234567890abcd',
        detectedAt: new Date('2025-01-15T16:45:00Z'),
        status: 'acknowledged',
        category: 'pattern_match'
    },
    {
        id: 'vuln_008',
        serialNumber: 8,
        pocSummary: 'Excessive gas consumption in loop',
        pocCodeLink: 'https://github.com/example/poc-008',
        priorityScore: 4,
        contractHash: '0xabcdef1234567890abcdef1234567890abcdef12',
        detectedAt: new Date('2025-01-15T17:20:00Z'),
        status: 'new',
        category: 'high_gas'
    },
    {
        id: 'vuln_009',
        serialNumber: 9,
        pocSummary: 'Timestamp manipulation vulnerability',
        pocCodeLink: 'https://github.com/example/poc-009',
        priorityScore: 3,
        contractHash: '0xef1234567890abcdef1234567890abcdef123456',
        detectedAt: new Date('2025-01-15T18:15:00Z'),
        status: 'new',
        category: 'pattern_match'
    },
    {
        id: 'vuln_010',
        serialNumber: 10,
        pocSummary: 'Liquidity drain attempt detected',
        pocCodeLink: 'https://github.com/example/poc-010',
        priorityScore: 1,
        contractHash: '0x4567890abcdef1234567890abcdef1234567890ab',
        detectedAt: new Date('2025-01-15T19:30:00Z'),
        status: 'new',
        category: 'liquidity_exceeded'
    },
    {
        id: 'vuln_011',
        serialNumber: 11,
        pocSummary: 'Unchecked external call vulnerability',
        pocCodeLink: 'https://github.com/example/poc-011',
        priorityScore: 2,
        contractHash: '0x7890abcdef1234567890abcdef1234567890abcde',
        detectedAt: new Date('2025-01-15T20:10:00Z'),
        status: 'acknowledged',
        category: 'pattern_match'
    },
    {
        id: 'vuln_012',
        serialNumber: 12,
        pocSummary: 'Flash loan attack pattern detected',
        pocCodeLink: 'https://github.com/example/poc-012',
        priorityScore: 1,
        contractHash: '0xbcdef1234567890abcdef1234567890abcdef123',
        detectedAt: new Date('2025-01-15T21:25:00Z'),
        status: 'new',
        category: 'suspicious_transaction'
    },
    {
        id: 'vuln_013',
        serialNumber: 13,
        pocSummary: 'Price oracle manipulation detected',
        pocCodeLink: 'https://github.com/example/poc-013',
        priorityScore: 2,
        contractHash: '0xf1234567890abcdef1234567890abcdef1234567',
        detectedAt: new Date('2025-01-15T22:40:00Z'),
        status: 'new',
        category: 'pattern_match'
    },
    {
        id: 'vuln_014',
        serialNumber: 14,
        pocSummary: 'MEV bot sandwich attack identified',
        pocCodeLink: 'https://github.com/example/poc-014',
        priorityScore: 3,
        contractHash: '0x567890abcdef1234567890abcdef1234567890abc',
        detectedAt: new Date('2025-01-15T23:15:00Z'),
        status: 'resolved',
        category: 'suspicious_transaction'
    },
    {
        id: 'vuln_015',
        serialNumber: 15,
        pocSummary: 'Governance token manipulation attempt',
        pocCodeLink: 'https://github.com/example/poc-015',
        priorityScore: 2,
        contractHash: '0x90abcdef1234567890abcdef1234567890abcdef',
        detectedAt: new Date('2025-01-16T00:30:00Z'),
        status: 'new',
        category: 'pattern_match'
    }
];

export const PRIORITY_LABELS = {
    1: 'Critical',
    2: 'High',
    3: 'Medium',
    4: 'Low',
    5: 'Info'
} as const;

export const PRIORITY_COLORS = {
    1: 'destructive',
    2: 'destructive',
    3: 'default',
    4: 'secondary',
    5: 'outline'
} as const;

export const CATEGORY_LABELS = {
    suspicious_transaction: 'Suspicious Transaction',
    high_gas: 'High Gas Usage',
    liquidity_exceeded: 'Liquidity Exceeded',
    pattern_match: 'Attack Pattern'
} as const;

export class VulnerabilityDataService {
    static filterData(data: VulnerabilityAlert[], filters: FilterState): VulnerabilityAlert[] {
        return data.filter(item => {
            // Priority filter
            if (filters.priorityScore && filters.priorityScore.length > 0) {
                if (!filters.priorityScore.includes(item.priorityScore)) {
                    return false;
                }
            }

            // Category filter
            if (filters.category && filters.category.length > 0) {
                if (!filters.category.includes(item.category)) {
                    return false;
                }
            }

            // Hash search
            if (filters.hashSearch && filters.hashSearch.trim()) {
                const searchTerm = filters.hashSearch.toLowerCase();
                if (!item.contractHash.toLowerCase().includes(searchTerm)) {
                    return false;
                }
            }

            // Date range filter
            if (filters.dateRange) {
                const itemDate = new Date(item.detectedAt);
                if (filters.dateRange.from && itemDate < filters.dateRange.from) {
                    return false;
                }
                if (filters.dateRange.to && itemDate > filters.dateRange.to) {
                    return false;
                }
            }

            return true;
        });
    }

    static sortData(data: VulnerabilityAlert[], sortBy: keyof VulnerabilityAlert, sortOrder: 'asc' | 'desc' = 'desc'): VulnerabilityAlert[] {
        return [...data].sort((a, b) => {
            const aValue = a[sortBy];
            const bValue = b[sortBy];

            if (aValue < bValue) return sortOrder === 'asc' ? -1 : 1;
            if (aValue > bValue) return sortOrder === 'asc' ? 1 : -1;
            return 0;
        });
    }

    static paginateData(data: VulnerabilityAlert[], pagination: PaginationState): {
        items: VulnerabilityAlert[];
        pagination: PaginationState;
    } {
        const startIndex = (pagination.currentPage - 1) * pagination.itemsPerPage;
        const endIndex = startIndex + pagination.itemsPerPage;
        const items = data.slice(startIndex, endIndex);

        const updatedPagination: PaginationState = {
            ...pagination,
            totalItems: data.length,
            totalPages: Math.ceil(data.length / pagination.itemsPerPage)
        };

        return { items, pagination: updatedPagination };
    }

    static getCriticalAlerts(data: VulnerabilityAlert[]): VulnerabilityAlert[] {
        return data.filter(item => item.priorityScore === 1 && item.status === 'new');
    }

    static getHashBadge(hash: string): string {
        return hash.slice(-5);
    }

    static formatDetectionTime(date: Date): string {
        return new Intl.DateTimeFormat('en-US', {
            month: 'short',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        }).format(date);
    }
}