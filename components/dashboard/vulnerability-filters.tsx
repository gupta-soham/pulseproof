"use client";

import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import { Separator } from "@/components/ui/separator";
import { FilterState } from "@/types";
import { PRIORITY_LABELS, CATEGORY_LABELS } from "@/lib/vulnerability-data";
import {
  Filter,
  X,
  Calendar as CalendarIcon,
  Search,
  RotateCcw,
} from "lucide-react";
import { format } from "date-fns";

interface VulnerabilityFiltersProps {
  filters: FilterState;
  onFiltersChange: (filters: FilterState) => void;
  totalResults: number;
  isCollapsed?: boolean;
  onToggleCollapse?: () => void;
}

export function VulnerabilityFilters({
  filters,
  onFiltersChange,
  totalResults,
  isCollapsed = false,
  onToggleCollapse,
}: VulnerabilityFiltersProps) {
  const [datePickerOpen, setDatePickerOpen] = useState<"from" | "to" | null>(
    null
  );

  const handlePriorityChange = (priority: number, checked: boolean) => {
    const currentPriorities = filters.priorityScore || [];
    const updatedPriorities = checked
      ? [...currentPriorities, priority]
      : currentPriorities.filter((p) => p !== priority);

    onFiltersChange({
      ...filters,
      priorityScore:
        updatedPriorities.length > 0 ? updatedPriorities : undefined,
    });
  };

  const handleCategoryChange = (category: string, checked: boolean) => {
    const currentCategories = filters.category || [];
    const updatedCategories = checked
      ? [...currentCategories, category]
      : currentCategories.filter((c) => c !== category);

    onFiltersChange({
      ...filters,
      category: updatedCategories.length > 0 ? updatedCategories : undefined,
    });
  };

  const handleHashSearchChange = (value: string) => {
    onFiltersChange({
      ...filters,
      hashSearch: value.trim() || undefined,
    });
  };

  const handleDateRangeChange = (
    type: "from" | "to",
    date: Date | undefined
  ) => {
    const currentRange = filters.dateRange || {
      from: undefined,
      to: undefined,
    };
    const updatedRange = {
      ...currentRange,
      [type]: date,
    };

    // Remove the date range if both dates are cleared
    if (!updatedRange.from && !updatedRange.to) {
      onFiltersChange({
        ...filters,
        dateRange: undefined,
      });
    } else {
      onFiltersChange({
        ...filters,
        dateRange: updatedRange,
      });
    }
    setDatePickerOpen(null);
  };

  const clearAllFilters = () => {
    onFiltersChange({});
  };

  const hasActiveFilters = !!(
    filters.priorityScore?.length ||
    filters.category?.length ||
    filters.hashSearch ||
    filters.dateRange
  );

  const getActiveFilterCount = () => {
    let count = 0;
    if (filters.priorityScore?.length) count++;
    if (filters.category?.length) count++;
    if (filters.hashSearch) count++;
    if (filters.dateRange) count++;
    return count;
  };

  if (isCollapsed) {
    return (
      <Card>
        <CardContent className="p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={onToggleCollapse}
                className="flex items-center gap-2"
              >
                <Filter className="h-4 w-4" />
                Filters
                {hasActiveFilters && (
                  <Badge
                    variant="secondary"
                    className="ml-1 h-5 px-1.5 text-xs"
                  >
                    {getActiveFilterCount()}
                  </Badge>
                )}
              </Button>
              {hasActiveFilters && (
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={clearAllFilters}
                  className="text-muted-foreground hover:text-foreground"
                >
                  <RotateCcw className="h-4 w-4 mr-1" />
                  Clear
                </Button>
              )}
            </div>
            <div className="text-sm text-muted-foreground">
              {totalResults} results
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader className="pb-3">
        <div className="flex items-center justify-between">
          <CardTitle className="text-lg flex items-center gap-2">
            <Filter className="h-5 w-5" />
            Filters
          </CardTitle>
          <div className="flex items-center gap-2">
            <div className="text-sm text-muted-foreground">
              {totalResults} results
            </div>
            {onToggleCollapse && (
              <Button
                variant="ghost"
                size="sm"
                onClick={onToggleCollapse}
                className="h-8 w-8 p-0"
              >
                <X className="h-4 w-4" />
              </Button>
            )}
          </div>
        </div>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Hash Search */}
        <div className="space-y-2">
          <Label htmlFor="hash-search" className="text-sm font-medium">
            Search by Hash
          </Label>
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
            <Input
              id="hash-search"
              placeholder="Enter contract hash..."
              value={filters.hashSearch || ""}
              onChange={(e) => handleHashSearchChange(e.target.value)}
              className="pl-10"
              aria-describedby="hash-search-description"
            />
            <div id="hash-search-description" className="sr-only">
              Search for vulnerabilities by contract hash
            </div>
          </div>
        </div>

        <Separator />

        {/* Priority Score Filter */}
        <div className="space-y-3">
          <Label className="text-sm font-medium">Priority Score</Label>
          <div className="space-y-2">
            {Object.entries(PRIORITY_LABELS).map(([score, label]) => (
              <div key={score} className="flex items-center space-x-2">
                <Checkbox
                  id={`priority-${score}`}
                  checked={
                    filters.priorityScore?.includes(Number(score)) || false
                  }
                  onCheckedChange={(checked) =>
                    handlePriorityChange(Number(score), checked as boolean)
                  }
                />
                <Label
                  htmlFor={`priority-${score}`}
                  className="text-sm font-normal cursor-pointer flex items-center gap-2"
                >
                  {label}
                  <Badge
                    variant={
                      Number(score) <= 2
                        ? "destructive"
                        : Number(score) === 3
                          ? "default"
                          : "secondary"
                    }
                    className="text-xs"
                  >
                    {score}
                  </Badge>
                </Label>
              </div>
            ))}
          </div>
        </div>

        <Separator />

        {/* Category Filter */}
        <div className="space-y-3">
          <Label className="text-sm font-medium">Category</Label>
          <div className="space-y-2">
            {Object.entries(CATEGORY_LABELS).map(([category, label]) => (
              <div key={category} className="flex items-center space-x-2">
                <Checkbox
                  id={`category-${category}`}
                  checked={filters.category?.includes(category) || false}
                  onCheckedChange={(checked) =>
                    handleCategoryChange(category, checked as boolean)
                  }
                />
                <Label
                  htmlFor={`category-${category}`}
                  className="text-sm font-normal cursor-pointer"
                >
                  {label}
                </Label>
              </div>
            ))}
          </div>
        </div>

        <Separator />

        {/* Date Range Filter */}
        <div className="space-y-3">
          <Label className="text-sm font-medium">Date Range</Label>
          <div className="grid grid-cols-2 gap-2">
            <div className="space-y-1">
              <Label
                htmlFor="date-from"
                className="text-xs text-muted-foreground"
              >
                From
              </Label>
              <Popover
                open={datePickerOpen === "from"}
                onOpenChange={(open) => setDatePickerOpen(open ? "from" : null)}
              >
                <PopoverTrigger asChild>
                  <Button
                    id="date-from"
                    variant="outline"
                    className="w-full justify-start text-left font-normal"
                  >
                    <CalendarIcon className="mr-2 h-4 w-4" />
                    {filters.dateRange?.from ? (
                      format(filters.dateRange.from, "MMM dd")
                    ) : (
                      <span className="text-muted-foreground">Pick date</span>
                    )}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0" align="start">
                  <Calendar
                    mode="single"
                    selected={filters.dateRange?.from}
                    onSelect={(date) => handleDateRangeChange("from", date)}
                    initialFocus
                  />
                </PopoverContent>
              </Popover>
            </div>
            <div className="space-y-1">
              <Label
                htmlFor="date-to"
                className="text-xs text-muted-foreground"
              >
                To
              </Label>
              <Popover
                open={datePickerOpen === "to"}
                onOpenChange={(open) => setDatePickerOpen(open ? "to" : null)}
              >
                <PopoverTrigger asChild>
                  <Button
                    id="date-to"
                    variant="outline"
                    className="w-full justify-start text-left font-normal"
                  >
                    <CalendarIcon className="mr-2 h-4 w-4" />
                    {filters.dateRange?.to ? (
                      format(filters.dateRange.to, "MMM dd")
                    ) : (
                      <span className="text-muted-foreground">Pick date</span>
                    )}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0" align="start">
                  <Calendar
                    mode="single"
                    selected={filters.dateRange?.to}
                    onSelect={(date) => handleDateRangeChange("to", date)}
                    initialFocus
                  />
                </PopoverContent>
              </Popover>
            </div>
          </div>
        </div>

        {/* Clear Filters */}
        {hasActiveFilters && (
          <>
            <Separator />
            <Button
              variant="outline"
              onClick={clearAllFilters}
              className="w-full"
            >
              <RotateCcw className="mr-2 h-4 w-4" />
              Clear All Filters
            </Button>
          </>
        )}
      </CardContent>
    </Card>
  );
}
