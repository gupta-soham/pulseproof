"use client";

import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { VulnerabilityAlert, PaginationState } from "@/types";
import {
  PRIORITY_LABELS,
  PRIORITY_COLORS,
  VulnerabilityDataService,
} from "@/lib/vulnerability-data";
import { VulnerabilityApiService } from "@/lib/vulnerability-api";
import { Pagination } from "./pagination";
import { PocDialog } from "@/components/ui/poc-dialog";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { ArrowUpDown, ArrowUp, ArrowDown } from "lucide-react";

interface VulnerabilityTableProps {
  data: VulnerabilityAlert[];
  pagination: PaginationState;
  onPageChange: (page: number) => void;
  onItemsPerPageChange: (itemsPerPage: number) => void;
  onStatusChange?: (
    vulnerabilityId: string,
    newStatus: "new" | "acknowledged" | "resolved"
  ) => void;
  isLoading?: boolean;
}

type SortField = keyof VulnerabilityAlert;
type SortOrder = "asc" | "desc";

export function VulnerabilityTable({
  data,
  pagination,
  onPageChange,
  onItemsPerPageChange,
  onStatusChange,
  isLoading = false,
}: VulnerabilityTableProps) {
  const [sortField, setSortField] = useState<SortField>("detectedAt");
  const [sortOrder, setSortOrder] = useState<SortOrder>("desc");

  const handleSort = (field: SortField) => {
    if (sortField === field) {
      setSortOrder(sortOrder === "asc" ? "desc" : "asc");
    } else {
      setSortField(field);
      setSortOrder("desc");
    }
  };

  const getSortIcon = (field: SortField) => {
    if (sortField !== field) {
      return <ArrowUpDown className="ml-2 h-4 w-4" />;
    }
    return sortOrder === "asc" ? (
      <ArrowUp className="ml-2 h-4 w-4" />
    ) : (
      <ArrowDown className="ml-2 h-4 w-4" />
    );
  };

  const sortedData = VulnerabilityDataService.sortData(
    data,
    sortField,
    sortOrder
  );

  const getPriorityVariant = (score: number) => {
    return PRIORITY_COLORS[score as keyof typeof PRIORITY_COLORS] || "default";
  };

  const formatDate = (date: Date) => {
    return VulnerabilityDataService.formatDetectionTime(date);
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case "new":
        return "destructive";
      case "acknowledged":
        return "default";
      case "resolved":
        return "secondary";
      default:
        return "outline";
    }
  };

  const handleStatusChange = async (
    vulnerabilityId: string,
    newStatus: "new" | "acknowledged" | "resolved"
  ) => {
    try {
      VulnerabilityApiService.updateVulnerabilityStatus(
        vulnerabilityId,
        newStatus
      );
      onStatusChange?.(vulnerabilityId, newStatus);
    } catch (error) {
      console.error("Error updating vulnerability status:", error);
      // Could add toast notification here
    }
  };

  if (isLoading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Vulnerability Alerts</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {[...Array(5)].map((_, i) => (
              <div key={i} className="h-16 bg-muted animate-pulse rounded" />
            ))}
          </div>
        </CardContent>
      </Card>
    );
  }

  if (data.length === 0) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Vulnerability Alerts</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-center py-12">
            <div className="text-muted-foreground mb-2">
              No vulnerabilities detected
            </div>
            <div className="text-sm text-muted-foreground">
              Your contract appears to be secure. We&apos;ll notify you if any
              issues are found.
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>Vulnerability Alerts ({data.length})</CardTitle>
      </CardHeader>
      <CardContent>
        {/* Desktop Table View */}
        <div className="hidden md:block rounded-md border">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead className="w-16">
                  <Button
                    variant="ghost"
                    size="sm"
                    className="h-8 p-0 font-medium"
                    onClick={() => handleSort("serialNumber")}
                    aria-label="Sort by serial number"
                  >
                    SN
                    {getSortIcon("serialNumber")}
                  </Button>
                </TableHead>
                <TableHead>
                  <Button
                    variant="ghost"
                    size="sm"
                    className="h-8 p-0 font-medium"
                    onClick={() => handleSort("pocSummary")}
                    aria-label="Sort by POC summary"
                  >
                    POC Summary
                    {getSortIcon("pocSummary")}
                  </Button>
                </TableHead>
                <TableHead className="w-32">
                  <Button
                    variant="ghost"
                    size="sm"
                    className="h-8 p-0 font-medium"
                    onClick={() => handleSort("priorityScore")}
                    aria-label="Sort by priority score"
                  >
                    Priority
                    {getSortIcon("priorityScore")}
                  </Button>
                </TableHead>
                <TableHead className="w-24">Hash</TableHead>
                <TableHead className="w-32">
                  <Button
                    variant="ghost"
                    size="sm"
                    className="h-8 p-0 font-medium"
                    onClick={() => handleSort("detectedAt")}
                    aria-label="Sort by detection date"
                  >
                    Detected
                    {getSortIcon("detectedAt")}
                  </Button>
                </TableHead>
                <TableHead className="w-24">Status</TableHead>
                <TableHead className="w-24">POC Code</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {sortedData.map((vulnerability) => (
                <TableRow key={vulnerability.id}>
                  <TableCell className="font-medium">
                    {vulnerability.serialNumber}
                  </TableCell>
                  <TableCell>
                    <div className="max-w-md">
                      <div className="font-medium text-sm">
                        {vulnerability.pocSummary}
                      </div>
                      <div className="text-xs text-muted-foreground mt-1 capitalize">
                        {vulnerability.category.replace("_", " ")}
                      </div>
                    </div>
                  </TableCell>
                  <TableCell>
                    <Badge
                      variant={getPriorityVariant(vulnerability.priorityScore)}
                    >
                      {PRIORITY_LABELS[vulnerability.priorityScore]}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    <Badge variant="outline" className="font-mono text-xs">
                      {VulnerabilityDataService.getHashBadge(
                        vulnerability.contractHash
                      )}
                    </Badge>
                  </TableCell>
                  <TableCell className="text-sm text-muted-foreground">
                    {formatDate(vulnerability.detectedAt)}
                  </TableCell>
                  <TableCell>
                    <Select
                      value={vulnerability.status}
                      onValueChange={(
                        newStatus: "new" | "acknowledged" | "resolved"
                      ) => handleStatusChange(vulnerability.id, newStatus)}
                    >
                      <SelectTrigger className="w-28">
                        <SelectValue>
                          <Badge
                            variant={getStatusColor(vulnerability.status)}
                            className="text-xs"
                          >
                            {vulnerability.status}
                          </Badge>
                        </SelectValue>
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="new">
                          <Badge variant="destructive" className="text-xs">
                            new
                          </Badge>
                        </SelectItem>
                        <SelectItem value="acknowledged">
                          <Badge variant="default" className="text-xs">
                            acknowledged
                          </Badge>
                        </SelectItem>
                        <SelectItem value="resolved">
                          <Badge variant="secondary" className="text-xs">
                            resolved
                          </Badge>
                        </SelectItem>
                      </SelectContent>
                    </Select>
                  </TableCell>
                  <TableCell>
                    <PocDialog
                      vulnerability={vulnerability}
                      trigger={
                        <Button
                          variant="outline"
                          size="sm"
                          className="h-7 sm:h-8 text-xs px-2 sm:px-3"
                        >
                          View
                        </Button>
                      }
                    />
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>

        {/* Mobile Card View */}
        <div className="md:hidden space-y-4">
          {sortedData.map((vulnerability) => (
            <Card key={vulnerability.id} className="p-4">
              <div className="space-y-3">
                <div className="flex items-start justify-between">
                  <div className="flex items-center gap-2">
                    <Badge
                      variant={getPriorityVariant(vulnerability.priorityScore)}
                    >
                      {PRIORITY_LABELS[vulnerability.priorityScore]}
                    </Badge>
                    <span className="text-sm text-muted-foreground">
                      #{vulnerability.serialNumber}
                    </span>
                  </div>
                  <Select
                    value={vulnerability.status}
                    onValueChange={(
                      newStatus: "new" | "acknowledged" | "resolved"
                    ) => handleStatusChange(vulnerability.id, newStatus)}
                  >
                    <SelectTrigger className="w-28">
                      <SelectValue>
                        <Badge
                          variant={getStatusColor(vulnerability.status)}
                          className="text-xs"
                        >
                          {vulnerability.status}
                        </Badge>
                      </SelectValue>
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="new">
                        <Badge variant="destructive" className="text-xs">
                          new
                        </Badge>
                      </SelectItem>
                      <SelectItem value="acknowledged">
                        <Badge variant="default" className="text-xs">
                          acknowledged
                        </Badge>
                      </SelectItem>
                      <SelectItem value="resolved">
                        <Badge variant="secondary" className="text-xs">
                          resolved
                        </Badge>
                      </SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <h3 className="font-medium text-sm mb-1">
                    {vulnerability.pocSummary}
                  </h3>
                  <p className="text-xs text-muted-foreground capitalize">
                    {vulnerability.category.replace("_", " ")}
                  </p>
                </div>

                <div className="flex items-center justify-between text-xs text-muted-foreground">
                  <div className="flex items-center gap-2">
                    <Badge variant="outline" className="font-mono text-xs">
                      {VulnerabilityDataService.getHashBadge(
                        vulnerability.contractHash
                      )}
                    </Badge>
                    <span>{formatDate(vulnerability.detectedAt)}</span>
                  </div>
                  <PocDialog
                    vulnerability={vulnerability}
                    trigger={
                      <Button
                        variant="outline"
                        size="sm"
                        className="h-7 sm:h-8 text-xs px-2 sm:px-3"
                        aria-label={`View POC code for vulnerability ${vulnerability.serialNumber}`}
                      >
                        View
                      </Button>
                    }
                  />
                </div>
              </div>
            </Card>
          ))}
        </div>
        <Pagination
          pagination={pagination}
          onPageChange={onPageChange}
          onItemsPerPageChange={onItemsPerPageChange}
        />
      </CardContent>
    </Card>
  );
}
